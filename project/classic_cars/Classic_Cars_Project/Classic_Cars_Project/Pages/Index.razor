@page "/"
@inject HttpClient Http
@inject NavigationManager NavManager
@using Classic_Cars_Project.Services
@inject VehicleSelectionService VehicleSelection

<PageTitle>Index</PageTitle>

<div class="search-container-main">
    <div class="search-header-main">
        <h2>Search in <span class="vehicle-count-main">7,000+</span> vehicles</h2>
    </div>
    <div class="search-bar-main">
        <input type="text" placeholder="Search..." @bind="searchQuery" />
        <button class="search_button" @onclick="ApplyFilters">Search</button>
    </div>
    <div class="filter-dropdown-main">
        <select value="@selectedBrand" @onchange="BrandChanged">
            <option value="">Select Brand</option>
            @foreach (var brand in brands)
            {
                <option value="@brand">@brand</option>
            }
        </select>



        <select value="@selectedYear" @onchange="YearChanged">
            <option value="">Select Year</option>
            @foreach (var year in years)
            {
                <option value="@year">@year</option>
            }
        </select>
    </div>

    <div class="price-range-container">
        <div>
            <label for="minPrice">Minimum Price:</label>
            <input type="number" id="minPrice" @bind="minPrice" @oninput="ApplyFilters" />
        </div>
        <div>
            <label for="maxPrice">Maximum Price:</label>
            <input type="number" id="maxPrice" @bind="maxPrice" @oninput="ApplyFilters" />
        </div>
    </div>
</div>

@if (searchResults.Any())
{
    <div class="search-results-grid">
    @foreach (var vehicle in searchResults)
        {
            <div class="card">
                @if (vehicle.Price == 0)
                {
                    <div class="auction-overlay">
                        Auction Car
                    </div>
                }
                <div class="Watch" @onclick="() => SelectCard(vehicle)">Compare</div>
                <img src="@vehicle.image_url" alt="Vehicle Image" />
                <div class="card-info">
                    <p><strong>Brand:</strong> @vehicle.Brand</p>
                    <p><strong>Model:</strong> @vehicle.model</p>

                    @if (vehicle.Price != 0)
                    {
                        <p><strong>Price:</strong> @FormatPrice(vehicle.Price)</p>
                    }

                    <p><strong>Year:</strong> @vehicle.Year</p>
                </div>
                <a href="@vehicle.detail_url" class="explore-more-btn">Explore More</a>
            </div>
        }
    </div>
}

<div class="pagination-container">
    @if (currentPage > 1)
    {
        <button class="page-button" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
    }
    <span>Page @currentPage</span>
    @if (searchResults.Count == itemsPerPage)
    {
        <button class="page-button" @onclick="() => ChangePage(currentPage + 1)">Next</button>
    }
</div>



@code {

    #region Varables
    private string searchQuery = "";
    private string selectedBrand = "";
    private string selectedYear = "";
    private int minPrice = 0;
    private int maxPrice = 1000000;

    private int currentPage = 1;
    private int totalPages = 0;
    private const int itemsPerPage = 20;

    private List<Vehicle> searchResults = new List<Vehicle>();
    private List<string> years = new List<string>();
    private List<string> brands = new List<string> {
"Abarth",
"Alfa Romeo",
"Aston Martin",
"Audi",
"Bentley",
"BMW",
"Bugatti",
"Cadillac",
"Chevrolet",
"Chrysler",
"Citroën",
"Dacia",
"Daewoo",
"Daihatsu",
"Dodge",
"Donkervoort",
"DS",
"Ferrari",
"Fiat",
"Fisker",
"Ford",
"Honda",
"Hummer",
"Hyundai",
"Infiniti",
"Iveco",
"Jaguar",
"Jeep",
"Kia",
"KTM",
"Lada",
"Lamborghini",
"Lancia",
"Land Rover",
"Landwind",
"Lexus",
"Lotus",
"Maserati",
"Maybach",
"Mazda",
"McLaren",
"Mercedes-Benz",
"MG",
"Mini",
"Mitsubishi",
"Morgan",
"Nissan",
"Opel",
"Peugeot",
"Porsche",
"Renault",
"Rolls-Royce",
"Rolls",
"Rover",
"Saab",
"Seat",
"Skoda",
"Smart",
"SsangYong",
"Subaru",
"Suzuki",
"Tesla",
"Toyota",
"Volkswagen",
"Volvo" };
    #endregion

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        for (int year = DateTime.Now.Year; year >= 1887; year--)
        {
            years.Add(year.ToString());
        }

        await ApplyFilters();
    }



    #region Page manipulations

    private async Task BrandChanged(ChangeEventArgs e)
    {
        selectedBrand = e.Value.ToString();
        await ApplyFilters();
    }



    private async Task YearChanged(ChangeEventArgs e)
    {
        selectedYear = e.Value.ToString();
        await ApplyFilters();
    }


    private async Task ChangePage(int page)
    {
        currentPage = page;
        await ApplyFilters();
    }


    private void SelectCard(Vehicle vehicle)
    {
        VehicleSelection.SelectVehicle(vehicle);
    }


    private string FormatPrice(decimal price)
    {
        return price == 0 ? "N/A" : $"${price:N0}";
    }

    #endregion

    #region Send Query
    private async Task ApplyFilters()
    {
        var queryParameters = new List<string>();


        if (!string.IsNullOrWhiteSpace(searchQuery))
            queryParameters.Add($"search={Uri.EscapeDataString(searchQuery)}");
        if (!string.IsNullOrWhiteSpace(selectedBrand))
            queryParameters.Add($"brand={Uri.EscapeDataString(selectedBrand)}");
        if (!string.IsNullOrWhiteSpace(selectedYear))
            queryParameters.Add($"year={Uri.EscapeDataString(selectedYear)}");
        if (minPrice > 0)
            queryParameters.Add($"minPrice={minPrice}");
        if (maxPrice < 1000000)
            queryParameters.Add($"maxPrice={maxPrice}");


        queryParameters.Add($"currentPage={currentPage}");
        queryParameters.Add($"itemsPerPage={itemsPerPage}");


        string query = string.Join("&", queryParameters);
        string apiUrl = "http://localhost:8000/api/vehicles/";
        string fullUrl = $"{apiUrl}?{query}";


        try
        {
            searchResults = await Http.GetFromJsonAsync<List<Vehicle>>(fullUrl);

        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request exception: {e.Message}");

        }
    }
    #endregion

}