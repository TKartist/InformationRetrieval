@page "/"
@inject HttpClient Http
@inject NavigationManager NavManager
@using Classic_Cars_Project.Services
@inject VehicleSelectionService VehicleSelection

<PageTitle>Index</PageTitle>

<div class="search-container-main">
    <div class="search-header-main">
        <h2>Search in <span class="vehicle-count-main">7,000+</span> vehicles</h2>
    </div>
    <div class="search-bar-main">
        <input type="text" placeholder="Search..." @bind="searchQuery" @oninput="ApplyFilters" />
        <button class="search_button" @onclick="ApplyFilters">Search</button>
    </div>
    <div class="filter-dropdown-main">
        <select value="@selectedBrand" @onchange="BrandChanged">
            <option value="">Select Brand</option>
            @foreach (var brand in brands)
            {
                <option value="@brand">@brand</option>
            }
        </select>



        <select value="@selectedYear" @onchange="YearChanged">
            <option value="">Select Year</option>
            @foreach (var year in years)
            {
                <option value="@year">@year</option>
            }
        </select>
    </div>

    <div class="price-range-container">
        <div>
            <label for="minPrice">Minimum Price:</label>
            <input type="number" id="minPrice" @bind="minPrice" @oninput="ApplyFilters" />
        </div>
        <div>
            <label for="maxPrice">Maximum Price:</label>
            <input type="number" id="maxPrice" @bind="maxPrice" @oninput="ApplyFilters" />
        </div>
    </div>
</div>

@if (searchResults.Any())
{
    <div class="search-results-grid">
        @foreach (var vehicle in searchResults)
        {
            <div class="card">
                <div class="Watch" @onclick="() => SelectCard(vehicle)">Compare</div>
                <img src="@vehicle.ImageUrl" alt="Vehicle Image" />
                <div class="card-info">
                    <p><strong>Brand:</strong> @vehicle.Brand</p>
                    <p><strong>Price:</strong> @vehicle.Price</p>
                    <p><strong>Year:</strong> @vehicle.Year</p>
                </div>
                <a href="@vehicle.DetailUrl" class="explore-more-btn">Explore More</a>
            </div>
        }
    </div>
}
<div class="pagination-container">
    @for (int pageNum = 1; pageNum <= totalPages; pageNum++)
    {
        <button class="page-button" @onclick="() => ChangePage(pageNum)">
            @pageNum
        </button>
    }
</div>

@code {
    private string searchQuery = "";
    private string selectedBrand = "";

    private string selectedYear = "";
    private int minPrice = 0;
    private int maxPrice = 1000000;

    private int currentPage = 1;
    private int totalPages = 0;
    private const int itemsPerPage = 18;

    private List<Vehicle> searchResults = new List<Vehicle>();

    private List<string> brands = new List<string> {
  "Abarth",
  "Alfa Romeo",
  "Aston Martin",
  "Audi",
  "Bentley",
  "BMW",
  "Bugatti",
  "Cadillac",
  "Chevrolet",
  "Chrysler",
  "Citroën",
  "Dacia",
  "Daewoo",
  "Daihatsu",
  "Dodge",
  "Donkervoort",
  "DS",
  "Ferrari",
  "Fiat",
  "Fisker",
  "Ford",
  "Honda",
  "Hummer",
  "Hyundai",
  "Infiniti",
  "Iveco",
  "Jaguar",
  "Jeep",
  "Kia",
  "KTM",
  "Lada",
  "Lamborghini",
  "Lancia",
  "Land Rover",
  "Landwind",
  "Lexus",
  "Lotus",
  "Maserati",
  "Maybach",
  "Mazda",
  "McLaren",
  "Mercedes-Benz",
  "MG",
  "Mini",
  "Mitsubishi",
  "Morgan",
  "Nissan",
  "Opel",
  "Peugeot",
  "Porsche",
  "Renault",
  "Rolls-Royce",
  "Rover",
  "Saab",
  "Seat",
  "Skoda",
  "Smart",
  "SsangYong",
  "Subaru",
  "Suzuki",
  "Tesla",
  "Toyota",
  "Volkswagen",
  "Volvo" };


    private List<string> years = new List<string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        for (int year = 2021; year >= 1887; year--)
        {
            years.Add(year.ToString());
        }

        // Read the page number from the URL
        var uri = new Uri(NavManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var pageValue = query["page"];
        if (int.TryParse(pageValue, out var page))
        {
            currentPage = Math.Max(page, 1); // Ensure page is at least 1
        }

        ApplyFilters();
    }


    private async Task BrandChanged(ChangeEventArgs e)
    {
        selectedBrand = e.Value.ToString();
        await ApplyFilters();
    }



    private async Task YearChanged(ChangeEventArgs e)
    {
        selectedYear = e.Value.ToString();
        await ApplyFilters();
    }


    private async Task ApplyFilters()
    {
        var queryParameters = new List<string>();

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            queryParameters.Add($"search={Uri.EscapeDataString(searchQuery)}");
        }
        if (!string.IsNullOrWhiteSpace(selectedBrand))
        {
            queryParameters.Add($"brand={Uri.EscapeDataString(selectedBrand)}");
        }
        if (!string.IsNullOrWhiteSpace(selectedYear))
        {
            queryParameters.Add($"year={Uri.EscapeDataString(selectedYear)}");
        }
        if (minPrice > 0)
        {
            queryParameters.Add($"minPrice={minPrice}");
        }
        if (maxPrice < 1000000)
        {
            queryParameters.Add($"maxPrice={maxPrice}");
        }

        if (currentPage > 1)
        {
            queryParameters.Add($"page={currentPage}");
        }
        queryParameters.Add($"itemsPerPage={itemsPerPage}");

        string query = string.Join("&", queryParameters);
        string apiUrl = "http://localhost:8000/api/vehicles/";
        string fullUrl = $"{apiUrl}?{query}";


        try
        {
            searchResults = await Http.GetFromJsonAsync<List<Vehicle>>(fullUrl);
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request exception: {e.Message}");
        }
    }
    private void ChangePage(int page)
    {
        currentPage = page;
        var baseUri = NavManager.BaseUri.EndsWith("/") ? NavManager.BaseUri : $"{NavManager.BaseUri}/";
        var newUri = $"{baseUri}?page={currentPage}";
        NavManager.NavigateTo(newUri);

        ApplyFilters();
    }

    private void SelectCard(Vehicle vehicle)
    {
        VehicleSelection.SelectVehicle(vehicle);
    }
}
